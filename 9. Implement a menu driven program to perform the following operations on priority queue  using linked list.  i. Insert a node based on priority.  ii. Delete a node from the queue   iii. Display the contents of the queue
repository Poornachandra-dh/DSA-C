#include <stdio.h> 
#include <stdlib.h> 
typedef struct Node { 
int data; 
int pri; 
struct Node *link; 
} Node; 
typedef Node* NODE; 
NODE front = NULL, rear = NULL; 
NODE getNode() { 
NODE NewNode = (NODE)malloc(sizeof(Node)); 
if (!NewNode) { 
printf("Memory Allocation Failed\n"); 
exit(1); 
} 
printf("Enter the integer Data:\n"); 
scanf("%d", &NewNode->data); 
printf("Enter the Priority of Data:\n"); 
scanf("%d", &NewNode->pri); 
NewNode->link = NULL; 
return NewNode; 
} 
void insert(NODE newNode) { 
if (front == NULL) { 
front = rear = newNode; 
} else { 
NODE first = front; 
NODE last = rear; 
NODE prev = NULL; 
if (newNode->pri < first->pri) { 
newNode->link = first; 
front = newNode; 
} else if (newNode->pri >= last->pri) { 
last->link = newNode; 
rear = newNode; 
} else { 
while (newNode->pri >= first->pri) { 
prev = first; 
first = first->link; 
} 
prev->link = newNode; 
newNode->link = first; 
} 
} 
} 
void Delete() { 
if (front == NULL) { 
printf("List is empty\n"); 
return; 
} 
NODE temp = front; 
if (temp->link == NULL) { 
free(temp); 
front = rear = NULL; 
} else { 
front = temp->link; 
free(temp); 
} 
} 
void Display() { 
if (front == NULL) { 
printf("\nList is Empty\n"); 
} else { 
NODE temp = front; 
while (temp != NULL) { 
printf("\nData=%d\tPriority=%d", temp->data, temp->pri); 
temp = temp->link; 
} 
} 
} 
int main() { 
int ch; 
for (;;) { 
printf("\n\tMenu\n"); 
printf("1: To insert \n"); 
printf("2: To Delete Element\n"); 
printf("3: To Display\n"); 
printf("4: To Exit\n"); 
printf("Enter your Choice :\n"); 
scanf("%d", &ch); 
switch (ch) { 
case 1: 
insert(getNode()); 
break; 
case 2: 
Delete(); 
break; 
case 3: 
Display(); 
break; 
case 4: 
exit(0); 
default: 
printf("\nInvalid Choice\n"); 
} 
} 
return 0; 
} 
