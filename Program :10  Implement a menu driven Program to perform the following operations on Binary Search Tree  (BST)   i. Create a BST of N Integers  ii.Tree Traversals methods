#include <stdio.h> 
#include <stdlib.h> 
typedef struct Node { 
int data; 
struct Node *Llink; 
struct Node *Rlink; 
} Node; 
typedef Node* NODE; 
NODE front = NULL, rear = NULL; 
NODE getNode() { 
NODE NewNode = (NODE)malloc(sizeof(Node)); 
if (!NewNode) { 
printf("Memory Allocation Failed\n"); 
exit(1); 
} 
printf("Enter the integer Data:\n"); 
scanf("%d", &NewNode->data); 
NewNode->Llink=NewNode->Rlink = NULL; 
return NewNode; 
} 
NODE insert(NODE Root,NODE newNode) { 
if (Root == NULL) { 
return newNode; 
} 
NODE temp=Root; 
if (newNode->data >temp->data ) 
temp->Rlink=insert(temp->Rlink,newNode); 
else 
temp->Llink=insert(temp->Llink,newNode); 
return Root; 
} 
void PreOrder(NODE Root) { 
if(Root!=NULL) 
{ 
printf("%d ",Root->data); 
PreOrder(Root->Llink); 
PreOrder(Root->Rlink); 
} 
} 
void PostOrder(NODE Root) { 
if(Root!=NULL) 
{ 
PostOrder(Root->Llink); 
PostOrder(Root->Rlink); 
printf("%d ",Root->data); 
} 
} 
void InOrder(NODE Root) { 
if(Root!=NULL) 
{ 
InOrder(Root->Llink); 
printf("%d ",Root->data); 
InOrder(Root->Rlink); 
} 
} 
int main() { 
int ch; 
NODE Root=NULL; 
for (;;) { 
printf("\n\tMenu\n"); 
printf("1: To insert Node\n"); 
printf("2: To PreOrder Traversal\n"); 
printf("3: To PostOrder Traversal\n"); 
printf("4: To To InOrder Traversal\n"); 
printf("5: To Exit\n"); 
printf("Enter your Choice :\n"); 
scanf("%d", &ch); 
switch (ch) { 
case 1: 
Root=insert(Root,getNode()); 
break; 
case 2: 
PreOrder(Root); 
break; 
case 3: 
PostOrder(Root); 
break; 
case 4: 
InOrder(Root); 
break; 
case 5: 
exit(0); 
default: 
printf("\nInvalid Choice\n"); 
} 
} 
return 0; 
}
