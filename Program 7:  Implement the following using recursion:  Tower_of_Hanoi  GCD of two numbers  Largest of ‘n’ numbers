#include <stdio.h>
#include <conio.h> // For clrscr() and getch()

// Function to compute GCD using recursion
int GCD(int m, int n) {
    if (n == 0)
        return m;
    return GCD(n, m % n);
}

// Function to solve Tower of Hanoi using recursion
void Hanoi(int n, char source, char auxiliary, char destination) {
    if (n == 1) {
        printf("\nMove disk 1 from %c to %c", source, destination);
        return;
    }
    Hanoi(n - 1, source, destination, auxiliary);
    printf("\nMove disk %d from %c to %c", n, source, destination);
    Hanoi(n - 1, auxiliary, source, destination);
}

// Function to find the largest element in an array using recursion
int Large(int arr[], int n) {
    int max;
    if (n == 1)
        return arr[0];
    max = Large(arr + 1, n - 1);
    return (arr[0] > max ? arr[0] : max);
}

int main() {
    int ch, a, b, n, num, res1, res2, i, ar[100];

    while (1) {
        clrscr(); // Clear the screen
        printf("\n\tMenu\n");
        printf("1: To find GCD\n");
        printf("2: To solve Tower of Hanoi\n");
        printf("3: To find Largest Element in Array\n");
        printf("4: Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);

        switch (ch) {
            case 1: // GCD
                printf("Enter the values of a and b: ");
                scanf("%d%d", &a, &b);
                res1 = GCD(a, b);
                printf("GCD = %d\n", res1);
                break;

            case 2: // Tower of Hanoi
                printf("Enter the number of disks: ");
                scanf("%d", &num);
                printf("The sequence of moves for Tower of Hanoi is:\n");
                Hanoi(num, 'A', 'B', 'C');
                break;

            case 3: // Largest element in array
                printf("Enter the size of the array: ");
                scanf("%d", &n);
                printf("Enter the elements: ");
                for (i = 0; i < n; i++)
                    scanf("%d", &ar[i]);
                res2 = Large(ar, n);
                printf("Largest = %d\n", res2);
                break;

            case 4: // Exit
                printf("Exiting the program.\n");
                getch(); // Wait for keypress before exiting
                return 0;

            default: // Invalid choice
                printf("\nInvalid Choice\n");
        }
        printf("\nPress any key to continue...");
        getch(); // Wait for keypress to proceed
    }

    return 0;
}

